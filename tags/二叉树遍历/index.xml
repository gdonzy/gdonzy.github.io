<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二叉树遍历 on Donzy&#39;s Blogs</title>
    <link>https://gdonzy.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</link>
    <description>Recent content in 二叉树遍历 on Donzy&#39;s Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>gxd.try@gmail.com (GaoXiaodong)</managingEditor>
    <webMaster>gxd.try@gmail.com (GaoXiaodong)</webMaster>
    <copyright>(c) 2015 gxd.try@gmail.com.</copyright>
    <lastBuildDate>Sun, 17 Apr 2016 16:52:55 +0800</lastBuildDate>
    <atom:link href="https://gdonzy.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>递归与迭代</title>
      <link>https://gdonzy.github.io/2016/04/17/%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/</link>
      <pubDate>Sun, 17 Apr 2016 16:52:55 +0800</pubDate>
      <author>gxd.try@gmail.com (GaoXiaodong)</author>
      <guid>https://gdonzy.github.io/2016/04/17/%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3/</guid>
      <description>

&lt;h2 id=&#34;0-前言&#34;&gt;0. 前言&lt;/h2&gt;

&lt;p&gt;本文主要是谈一下递归与迭代的转换问题,会涉及到一些简单递归算法和二叉树遍历算法的递归与非递归转换。&lt;/p&gt;

&lt;h2 id=&#34;1-递归与迭代简介&#34;&gt;1. 递归与迭代简介&lt;/h2&gt;

&lt;p&gt;递归：指在定义一个过程或函数时出现调用本过程或本函数的成分。分为直接递归和间接递归，直接递归指直接调用自身;而间接递归指在调用过程中会间接调用自身。
如果一个递归过程或递归函数中递归调用语句是最后一条执行语句，这种递归调用称为尾递归。
迭代：重复反馈过程的活动，其目的通常是为了逼近所需目标和结果。通俗理解为有限循环。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;递归与迭代的异同点
递归与迭代的相同点：递归与迭代都需要执行一些重复操作，并且执行条件会收敛，不会无限执行下去。
递归与迭代的不同点：递归是有来有回（返回），迭代是有去无回。
实现递归转换成迭代的关键是：1.将递归的收敛条件转换成迭代的条件执行。2.如何转换递归的返回过程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;搜索资料发现：目前有两种比较主流的转换方法，在第二节和第三节分别实例讲解一下。&lt;/p&gt;

&lt;h2 id=&#34;2-递归转换的简单方法&#34;&gt;2. 递归转换的简单方法&lt;/h2&gt;

&lt;p&gt;递归转换的简单方法以factorial递归算法的转换为例：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(1)python实现的原始版本&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;def factorial(n):
	if n &amp;lt; 2:
		return 1;
	return n * factorial(n-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;(2)转换成尾递归的格式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;def factorial(n,acc=1):
	if n &amp;lt; 2:
		return 1*acc
	return factorial(n-1,acc*n)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;(3)转换成迭代格式&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;def factorial(n,acc=1):
	while n &amp;gt; 1:
		(n,acc) = (n-1,acc*n)
	return acc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-利用栈实现递归转换&#34;&gt;3. 利用栈实现递归转换&lt;/h2&gt;

&lt;h3 id=&#34;3-1-前序遍历&#34;&gt;3.1 前序遍历&lt;/h3&gt;

&lt;p&gt;另一种递归转换方法稍微复杂些，适合回溯时情况复杂的递归转换，这种递归转换需要利用栈，二叉树遍历就适用这种状况
这里是二叉树遍历的完整实现  &lt;a href=&#34;https://github.com/gdonzy/Essay/blob/master/dataStruct/binarytree.py&#34;&gt;https://github.com/gdonzy/Essay/blob/master/dataStruct/binarytree.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以前序遍历为例，简单介绍一下利用栈实现递归转换的方式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(1)python版本实现的递归版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前序遍历首先访问根节点，再访问左子树，然后访问右子树。左子树和右子树访问过程中也是先访问根节点，再访问左子树，然后访问右子树。如此循环往复。&lt;/p&gt;

&lt;p&gt;如下就是根据描述，列出的前序遍历的递归实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def preOrderRecursive(self,treeNode):
        if treeNode == None:
            return None
        else:
            print(treeNode.data,end=&amp;quot;,&amp;quot;)
            self.preOrderRecursive(treeNode.left)
            self.preOrderRecursive(treeNode.right)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;(2)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;前序遍历首先访问根节点，再访问左子树，然后访问右子树。左子树和右子树访问过程中也是先访问根节点，再访问左子树，然后访问右子树。如此循环往复。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;观察前序遍历的递归实现，可以发现有四种基本操作：
- a.节点为空，空操作
- b.访问该节点（打印节点数据）
- c.递归访问左子树
- d.递归访问右子树&lt;/p&gt;

&lt;p&gt;结合递归实现，不拘泥于单次递归，用连续递归的方式描述前序遍历：
- 1.如果节点不为空，则访问该节点，然后递归访问左子节点
- 2.重复1操作，直到左子节点为空，左子节点递归访问开始递归返回
- 3.左子节点递归访问返回后，递归访问右子节点,如果节点为空，则右子节点递归访问返回，然后继续递归返回，递归返回到节点右子节点不为空
- 4.递归访问右子节点过程中重复执行1-3步骤
- 5.递归调用何时结束?所有递归返回结束&lt;/p&gt;

&lt;p&gt;接下来将连续递归的方式描述转换成迭代的方式（利用栈）来描述。
- 1.该节点不为空，访问该节点，将该节点压栈，访问左子节点
- 2.重复1操作，直到左子节点为空，从栈中取出节点N，如果节点N右子节点为空，继续出栈节点，直到节点N的右子节点不为空
- 3.尝试访问节点N的右子节点（步骤1）
- 4.重复执行1-3步骤
- 5.重复执行何时结束?正在访问的节点为空（需要查看是否有需要回溯查看的节点，需要查看栈）并且栈空（没有需要回溯查看的节点）&lt;/p&gt;

&lt;p&gt;下面就是前序遍历的迭代方式实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def preOrder(self):
        stack = []
        pNode = self.root
        while pNode != None :
            while pNode != None :
                print(pNode.data,end=&amp;quot;,&amp;quot;)
                stack.append(pNode)
                pNode = pNode.left
            
            if len(stack) &amp;gt; 0:
                pNode = stack.pop()
            else:
                pNode = None
            
            while pNode != None and pNode.right == None:
                if len(stack) &amp;gt; 0:
                    pNode = stack.pop()
                else:
                    pNode = None
            
            if pNode != None:
                pNode = pNode.right
 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-2-中序遍历&#34;&gt;3.2 中序遍历&lt;/h3&gt;

&lt;p&gt;中序遍历的分析类似与前序遍历，下面是中序遍历的递归和迭代实现&lt;/p&gt;

&lt;p&gt;中序遍历的递归实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def inOrderRecursive(self,treeNode):
        if treeNode == None:
            return None
        else:
            self.inOrderRecursive(treeNode.left)
            print(treeNode.data,end=&amp;quot;,&amp;quot;)
            self.inOrderRecursive(treeNode.right)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;中序遍历的迭代实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def inOrder(self):
        stack = []
        pNode = self.root
        while pNode != None:
            while pNode.left != None:
                stack.append(pNode)
                pNode = pNode.left
            
            print(pNode.data,end=&amp;quot;,&amp;quot;)
            
            while pNode != None and pNode.right == None:
                if len(stack) &amp;gt; 0:
                    pNode = stack.pop()
                    print(pNode.data,end=&amp;quot;,&amp;quot;)
                else:
                    pNode = None
            
            if pNode != None :
                pNode = pNode.right
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-3-后序遍历&#34;&gt;3.3 后序遍历&lt;/h3&gt;

&lt;p&gt;后序遍历首先遍历左子树，然后遍历右子树，最后访问根结点，在遍历左、右子树时，仍然先遍历左子树，然后遍历右子树，最后遍历根结点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;后序遍历的递归实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def postOrderRecursive(self,treeNode):
    if treeNode == None:
        return None
    else:
        self.postOrderRecursive(treeNode.left)
        self.postOrderRecursive(treeNode.right)
        print(treeNode.data,end=&amp;quot;,&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;后序遍历的迭代实现&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;运用上述分析方法：&lt;/p&gt;

&lt;p&gt;后序遍历的连续递归描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def postOrder(self):
        stack = []
        pNode = self.root
        markNode = None
        while pNode != None:
            #左子节点压栈
            while pNode != None and pNode.left != markNode: #markNode容易忽略
                stack.append(pNode)
                pNode = pNode.left
            
            if pNode == None:
                pNode = stack.pop()
            
            #没有右子节点的左子节点打印、出栈    
            while pNode != None and pNode.right == None : 
                print(pNode.data,end=&amp;quot;,&amp;quot;)
                if pNode.left == markNode: #markNode无用
                    markNode = pNode
                if len(stack) &amp;gt; 0:
                    pNode = stack.pop()
                else:
                    pNode = None
            
            #右子树处理    
            if pNode != None and pNode.right != markNode: #markNode可能等于None
                stack.append(pNode)
                pNode = pNode.right
                markNode = pNode
            elif pNode != None and pNode.right == markNode :
                print(pNode.data,end=&amp;quot;,&amp;quot;)
                markNode = pNode
                if len(stack) &amp;gt; 0:
                    pNode = stack.pop()
                else:
                    pNode = None
            elif pNode != None and pNode.right == None:
                print(pNode.data,end=&amp;quot;,&amp;quot;)
                markNode = pNode
                if len(stack) &amp;gt; 0:
                    pNode = stack.pop()
                else:
                    pNode = None    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>